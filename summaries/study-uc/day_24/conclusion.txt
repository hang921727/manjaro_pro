一 信号从产生到处理的过程
   1 在bash下启动进程a.out
   2 按下ctrl + c 产生硬件中断,不管进程运行在用户态还是内核态,进程都会切换到内核态
   3 驱动程序将中断解释为2号信号,将这个到达的信号记录到进程的PCB中
   4 当进程要从内核态切换回用户态的时候,检测PCB中是否有信号到达
   5 如何没有信号到达,直接切换回用户态,继续执行
   6 如果有信号到达,调用信号的处理函数,信号处理函数执行完毕,调用sigreturn(2),结束信号处理函数
     清空函数的栈帧,返回到内核态,执行第四部
   a 主程序    b 信号处理函数
        异步的

二 可重入函数 
   只使用函数私有空间(栈帧),不使用进程的全局空间(栈段 数据段...),这样的函数称为可重入函数
	举例说明不可重用函数产生的错误 vi dump.c

三 前台作业和后台作业(两个是异步的)
   ps -o pid,ppid,pgrp,session,comm
   session 会话(有的会话有终端,有的没终端(精灵/守护进程))
   有终端的会话有且仅有一个前台作业,可以有多个后台作业
   进程组      父进程 子进程 子进程的子进程在一个进程组中
   作业(job)   父进程和子进程在一个作业,子进程和子进程的子进程在另一个作业
	ctrl z 将正在运行的作业放到后台停止
	jobs 查看后台作业
	fg %作业号	将后台作业放切回前台作业
	bg %作业号	让作业在后台运行(jobs;bg %1;jobs)
	command&	执行作业的时候,直接放后台
  使用快捷键只能给前台作业发送信号,发送给后台作业要kill -信号编号 pid

四 bash脚本
   将要执行的linux命令编写到一个文件中,一起执行,这样的文件就是bash脚本文件

五 (System V公司做的)   IPC(internal process communication)
   如何查看系统的这些对象? ipcs命令   
   系统要管理这些对象,需要对每一个对象都有唯一的编号 id
	消息队列(smqid) 共享内存(shmid) 信号量集(semid)
	键值(唯一性)
	需要在用户空间获取一个键值,使用这个键值获取一个对象
		1 获取键值 ftok(3)		
  消息队列
	获取消息队列的id msgget(2)
	使用消息队列实现两个进程间的通讯
		发送消息到消息队列 msgend(2)
		从消息队列获取信息 msgrcv(2)
			如果消息队列中有充足的空间接纳消息,放入消息队列,立即返回
			如果消息队列中没有充足的空间接纳消息,默认(0)阻塞.可以修改msflg参数中包含该IPC_NOWAIT
  共享内存

	#include <sys/ipc.h>
       	#include <sys/shm.h>
       	int shmget(key_t key, size_t size, int shmflg); 分配一个共享内存段,并获取其id 关联起来	
	#include <sys/types.h>
        #include <sys/shm.h>
	将共享内存段关联到当前进程的地址空间
        void *shmat(int shmid, const void *shmaddr, int shmflg);
	解除共享内存段和进程的关联        
	int shmdt(const void *shmaddr);



