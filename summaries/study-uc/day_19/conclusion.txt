回忆上周五的内容：
内存管理
页　　　页框　　页表
虚拟地址　　　物理地址
代码段　　数据段　　　栈段　　　堆
栈段包含了很多的栈帧，每个栈帧对应着一个正在运行的函数。
函数的生命周期　　　进程的生命周期

进程的映像
每个进程都有自己独立的４G的虚拟地址空间

其中３G是用户态。１G内核态

今天的内容：
一　使用mmap(2)将物理地址映射到进程的虚拟地址空间
#include <sys/mman.h>
void *mmap(void *addr, size_t length, int prot, int flags,
                  int fd, off_t offset);
功能：将文件映射到内存
参数：
addr:指定了映射区域的起始地址　NULL 有内核指定映射的区域
length:指定了映射区域的长度
prot:
PROT_EXEC  Pages may be executed.
PROT_READ  Pages may be read.
PROT_WRITE Pages may be written.

PROT_NONE  Pages may not be accessed.

flags:
MAP_SHARED：对映射区域的更改会被其它的进程(映射同一个文件的)看到，更新传送给底层的文件
MAP_PRIVATE：对映射区域的更改不会被其它进程（映射到同一个文件的）看到
更新不传递给底层的文件

MAP_ANONYMOUS：匿名映射
fd   -1; offset   忽略
  
fd:文件描述符，指定了要操作的文件。
offset:指定了映射文件的位置
返回值：
错误　MAP_FAILED　　errno被设置
成功　　返回映射区域的地址

int munmap(void *addr, size_t length);
功能：解除内存的映射
参数：
addr:指定了映射区域的首地址
length:指定了映射区域的长度
返回值：
成功　　　0
错误　　　-1  errno被设置

将文件或设备映射到内存
linux 下一切皆文件
值-结果参数　　　　

举例说明:  使用mmap(2)将物理地址映射到进程的虚拟地址空间
代码参见　　mmap.c



二  文件的操作 

使用库函数来对文件进行操作.
fopen(3)  fclose(2) ...
使用系统调用对文件进行操作
open(2)  close(2)  read(2)  write(2)  lseek(2)
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
int open(const char *pathname, int flags,...);
功能：打开一个文件，有可能创建一个文件
参数：
pathname:指定了要打开的文件的路径

flags:
三选一:
O_RDONLY, O_WRONLY, or O_RDWR

文件的创建标记和身份标记
O_CREAT：如果文件不存在，则创建文件。如果标记里有这个标识，必须指定mode，mode 指定了将要创建的文件的权限。mode指定的权限有可能被进程的umask修改，修改的方法是(mode&~umask)。
　　　文件存在的时候？

O_EXCL：确信创建文件，如果这个标记和O_CREAT一起指定的时候，要创建的文件已经存在，报错。
O_TRUNC：如果文件已经存在，并且是一个普通文件，以写的方式打开的，那么文件的内容将被清空为0

O_APPEND：以追加的方式打开文件，在每次写之前，文件的读写位置定位在文件的末尾。

...:可变参数，参数的个数和类型，取决于最接近的那个参数(flags)。
返回值：
成功　　返回一个新的文件描述符
错误　　-1   errno被设置

补充：
1 可变参数
...
printf("beijing");
printf("beijing %d\n",val);
int printf(const char *format, ...);

２ 文件描述符
返回一个最小的　非负的　　　当前进程没有使用的文件描述符
程序和进程的区别：
程序是静态的，是计算机指令的集合，存放在磁盘上的。
进程是动态的，是程序运行的实例。加载到了内存。每个进程都有自己的pid.
进程的本质：

...
mov ax,32
mov bx,21
...

cpu器件里有寄存器
将程序执行的每条指令的状态，需要记录下来。每条记录相当于一张照片。
进程记录了程序执行的时候，对计算机资源的使用情况。

文件也是计算机的资源，在打开一个文件的时候，也会记录这个资源的使用情况。
每个进程还有自己的户口本，记录了进程使用的资源情况。PCB（process control block）
在进程的PCB中记录了进程使用的文件的情况。

文件描述符0 1 2已经被占用
0  标准输入　　STDIN_FILENO
1  标准输出　　STDOUT_FILENO
２　标准错误输出　　STDERR_FILENO


3 文件的权限
-rw-rw-r-- 1 tarena tarena  486 8月   6 10:52 mmap.c

最前边的字符是文件的类型
-  普通文件
d  文件夹文件
c  字符设备文件
b  块设备文件
s  socket文件
p  管道文件　　　？？？
l  软链接文件

rw-rw-r--
文件的权限
　r 读  w 写  x　可执行
rwx  

文件拥有者的权限　　u
用户组的权限　　　　g
其他人的权限　　　　o
a

rw-rw-r--
110110100
0664
　　  
４ umask
权限掩码  将权限拿走
如何查看umask?
day05$umask
0002
-------w-
可以更改umask
umask 0033
----wx-wx

touch hello
0666  rw-rw-rw-
0002  -------w-
      rw-rw-r--
0033  ----wx-wx
      rw-r--r--


mode&~umask    0666                rw-rw-rw-
               0002   -------w-    rwxrwxr-x
                                   rw-rw-r--

#include <unistd.h>
int close(int fd);
功能：关闭文件描述符
参数：
fd:指定了要关闭的文件描述符
返回值：
成功　　　0
错误　-1  errno被设置

举例说明　　　打开文件
1  以只读的方式打开文件，文件名字通过命令行的第一个参数指定　　r_file.c
２　以写的方式打开文件，文件不存在，创建文件，指定文件的权限为0644．文件存在，报错。文件的名字通过命令行的第一个参数传递  we_file.c
３　以写的方式打开文件，文件不存在，创建文件，指定文件的权限为0644，文件存在，将文件的内容清空。文件的名字通过命令行的第一个参数传递wt_file.c


read(2)/write(2)
#include <unistd.h>
ssize_t read(int fd, void *buf, size_t count);
功能：从一个文件描述符读取数据
参数：
fd:指定了文件描述符，从这个描述符指向的文件里读取数据
buf:指定了存取读取数据的首地址
count:尝试读取的最大字节数，请求读取的最多字节数
返回值：
错误　　-1   errno被设置
成功　　读取的字节数。0 代表到达了文件的末尾。有可能返回值小于请求的字节数。

#include <unistd.h>
ssize_t write(int fd, const void *buf, size_t count);
功能：将数据写入到文件中
参数：
fd:指定了目标文件的文件描述符
buf:存放数据的地址。将这个地址里的数据写入到文件中
count:请求的字节数。请求写入文件的字节数。
返回值：
错误　　　-1   errno被设置
成功　　返回实际写入的字节数。0代表什么都没写。返回值小于请求值的时候，有可能是磁盘满了。

举例说明　　编写代码实现cat filename的功能。
将这个文件编译生成可执行文件　　mycat.
代码参见　　mycat.c

lseek(2)
#include <sys/types.h>
#include <unistd.h>
off_t lseek(int fd, off_t offset, int whence);
功能：重新定位文件的读写位置
参数：
fd:指定了文件描述符。
offset:相对于参照位置的偏移量
whence：指定了参照位置
SEEK_SET：offset
SEEK_CUR：location+offset
SEEK_END：  end+offset
返回值：
错误　　-1   errno被设置
成功　　返回相对于文件开头的字节数


举例说明　　打开文件，定位到文件第七个位置，然后读取出数据，显示出来。
代码参见　　　lseek.c


作业：
编写代码　　实现cp命令的功能。
cp   源文件　　　目标文件
将源程序编译生成可执行文件　mycp

总结：
一　将物理地址映射到进程的虚拟地址空间
mmap(2)  munmap(2)
以页为单位进行的映射。
匿名映射

二　　文件的操作
open(2)  close(2)  read(2)  write(2)  lseek(2)
文件描述符的理解
文件的类型
文件的权限
umask;









